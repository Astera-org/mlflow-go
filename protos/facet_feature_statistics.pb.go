// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: facet_feature_statistics.proto

package protos

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureNameStatistics_Type int32

const (
	FeatureNameStatistics_INT    FeatureNameStatistics_Type = 0
	FeatureNameStatistics_FLOAT  FeatureNameStatistics_Type = 1
	FeatureNameStatistics_STRING FeatureNameStatistics_Type = 2
	FeatureNameStatistics_BYTES  FeatureNameStatistics_Type = 3
	FeatureNameStatistics_STRUCT FeatureNameStatistics_Type = 4
)

// Enum value maps for FeatureNameStatistics_Type.
var (
	FeatureNameStatistics_Type_name = map[int32]string{
		0: "INT",
		1: "FLOAT",
		2: "STRING",
		3: "BYTES",
		4: "STRUCT",
	}
	FeatureNameStatistics_Type_value = map[string]int32{
		"INT":    0,
		"FLOAT":  1,
		"STRING": 2,
		"BYTES":  3,
		"STRUCT": 4,
	}
)

func (x FeatureNameStatistics_Type) Enum() *FeatureNameStatistics_Type {
	p := new(FeatureNameStatistics_Type)
	*p = x
	return p
}

func (x FeatureNameStatistics_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureNameStatistics_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_facet_feature_statistics_proto_enumTypes[0].Descriptor()
}

func (FeatureNameStatistics_Type) Type() protoreflect.EnumType {
	return &file_facet_feature_statistics_proto_enumTypes[0]
}

func (x FeatureNameStatistics_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeatureNameStatistics_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeatureNameStatistics_Type(num)
	return nil
}

// Deprecated: Use FeatureNameStatistics_Type.Descriptor instead.
func (FeatureNameStatistics_Type) EnumDescriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{3, 0}
}

type Histogram_HistogramType int32

const (
	Histogram_STANDARD  Histogram_HistogramType = 0
	Histogram_QUANTILES Histogram_HistogramType = 1
)

// Enum value maps for Histogram_HistogramType.
var (
	Histogram_HistogramType_name = map[int32]string{
		0: "STANDARD",
		1: "QUANTILES",
	}
	Histogram_HistogramType_value = map[string]int32{
		"STANDARD":  0,
		"QUANTILES": 1,
	}
)

func (x Histogram_HistogramType) Enum() *Histogram_HistogramType {
	p := new(Histogram_HistogramType)
	*p = x
	return p
}

func (x Histogram_HistogramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Histogram_HistogramType) Descriptor() protoreflect.EnumDescriptor {
	return file_facet_feature_statistics_proto_enumTypes[1].Descriptor()
}

func (Histogram_HistogramType) Type() protoreflect.EnumType {
	return &file_facet_feature_statistics_proto_enumTypes[1]
}

func (x Histogram_HistogramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Histogram_HistogramType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Histogram_HistogramType(num)
	return nil
}

// Deprecated: Use Histogram_HistogramType.Descriptor instead.
func (Histogram_HistogramType) EnumDescriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{13, 0}
}

type DatasetFeatureStatisticsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets []*DatasetFeatureStatistics `protobuf:"bytes,1,rep,name=datasets" json:"datasets,omitempty"`
}

func (x *DatasetFeatureStatisticsList) Reset() {
	*x = DatasetFeatureStatisticsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetFeatureStatisticsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetFeatureStatisticsList) ProtoMessage() {}

func (x *DatasetFeatureStatisticsList) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetFeatureStatisticsList.ProtoReflect.Descriptor instead.
func (*DatasetFeatureStatisticsList) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetFeatureStatisticsList) GetDatasets() []*DatasetFeatureStatistics {
	if x != nil {
		return x.Datasets
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step []string `protobuf:"bytes,1,rep,name=step" json:"step,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *Path) GetStep() []string {
	if x != nil {
		return x.Step
	}
	return nil
}

type DatasetFeatureStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumExamples         *int64                   `protobuf:"varint,2,opt,name=num_examples,json=numExamples" json:"num_examples,omitempty"`
	WeightedNumExamples *float64                 `protobuf:"fixed64,4,opt,name=weighted_num_examples,json=weightedNumExamples" json:"weighted_num_examples,omitempty"`
	Features            []*FeatureNameStatistics `protobuf:"bytes,3,rep,name=features" json:"features,omitempty"`
}

func (x *DatasetFeatureStatistics) Reset() {
	*x = DatasetFeatureStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetFeatureStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetFeatureStatistics) ProtoMessage() {}

func (x *DatasetFeatureStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetFeatureStatistics.ProtoReflect.Descriptor instead.
func (*DatasetFeatureStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{2}
}

func (x *DatasetFeatureStatistics) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DatasetFeatureStatistics) GetNumExamples() int64 {
	if x != nil && x.NumExamples != nil {
		return *x.NumExamples
	}
	return 0
}

func (x *DatasetFeatureStatistics) GetWeightedNumExamples() float64 {
	if x != nil && x.WeightedNumExamples != nil {
		return *x.WeightedNumExamples
	}
	return 0
}

func (x *DatasetFeatureStatistics) GetFeatures() []*FeatureNameStatistics {
	if x != nil {
		return x.Features
	}
	return nil
}

type FeatureNameStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FieldId:
	//
	//	*FeatureNameStatistics_Name
	//	*FeatureNameStatistics_Path
	FieldId isFeatureNameStatistics_FieldId `protobuf_oneof:"field_id"`
	Type    *FeatureNameStatistics_Type     `protobuf:"varint,2,opt,name=type,enum=facetFeatureStatistics.FeatureNameStatistics_Type" json:"type,omitempty"`
	// Types that are assignable to Stats:
	//
	//	*FeatureNameStatistics_NumStats
	//	*FeatureNameStatistics_StringStats
	//	*FeatureNameStatistics_BytesStats
	//	*FeatureNameStatistics_StructStats
	Stats       isFeatureNameStatistics_Stats `protobuf_oneof:"stats"`
	CustomStats []*CustomStatistic            `protobuf:"bytes,6,rep,name=custom_stats,json=customStats" json:"custom_stats,omitempty"`
}

func (x *FeatureNameStatistics) Reset() {
	*x = FeatureNameStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureNameStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureNameStatistics) ProtoMessage() {}

func (x *FeatureNameStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureNameStatistics.ProtoReflect.Descriptor instead.
func (*FeatureNameStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{3}
}

func (m *FeatureNameStatistics) GetFieldId() isFeatureNameStatistics_FieldId {
	if m != nil {
		return m.FieldId
	}
	return nil
}

func (x *FeatureNameStatistics) GetName() string {
	if x, ok := x.GetFieldId().(*FeatureNameStatistics_Name); ok {
		return x.Name
	}
	return ""
}

func (x *FeatureNameStatistics) GetPath() *Path {
	if x, ok := x.GetFieldId().(*FeatureNameStatistics_Path); ok {
		return x.Path
	}
	return nil
}

func (x *FeatureNameStatistics) GetType() FeatureNameStatistics_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FeatureNameStatistics_INT
}

func (m *FeatureNameStatistics) GetStats() isFeatureNameStatistics_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (x *FeatureNameStatistics) GetNumStats() *NumericStatistics {
	if x, ok := x.GetStats().(*FeatureNameStatistics_NumStats); ok {
		return x.NumStats
	}
	return nil
}

func (x *FeatureNameStatistics) GetStringStats() *StringStatistics {
	if x, ok := x.GetStats().(*FeatureNameStatistics_StringStats); ok {
		return x.StringStats
	}
	return nil
}

func (x *FeatureNameStatistics) GetBytesStats() *BytesStatistics {
	if x, ok := x.GetStats().(*FeatureNameStatistics_BytesStats); ok {
		return x.BytesStats
	}
	return nil
}

func (x *FeatureNameStatistics) GetStructStats() *StructStatistics {
	if x, ok := x.GetStats().(*FeatureNameStatistics_StructStats); ok {
		return x.StructStats
	}
	return nil
}

func (x *FeatureNameStatistics) GetCustomStats() []*CustomStatistic {
	if x != nil {
		return x.CustomStats
	}
	return nil
}

type isFeatureNameStatistics_FieldId interface {
	isFeatureNameStatistics_FieldId()
}

type FeatureNameStatistics_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,oneof"`
}

type FeatureNameStatistics_Path struct {
	Path *Path `protobuf:"bytes,8,opt,name=path,oneof"`
}

func (*FeatureNameStatistics_Name) isFeatureNameStatistics_FieldId() {}

func (*FeatureNameStatistics_Path) isFeatureNameStatistics_FieldId() {}

type isFeatureNameStatistics_Stats interface {
	isFeatureNameStatistics_Stats()
}

type FeatureNameStatistics_NumStats struct {
	NumStats *NumericStatistics `protobuf:"bytes,3,opt,name=num_stats,json=numStats,oneof"`
}

type FeatureNameStatistics_StringStats struct {
	StringStats *StringStatistics `protobuf:"bytes,4,opt,name=string_stats,json=stringStats,oneof"`
}

type FeatureNameStatistics_BytesStats struct {
	BytesStats *BytesStatistics `protobuf:"bytes,5,opt,name=bytes_stats,json=bytesStats,oneof"`
}

type FeatureNameStatistics_StructStats struct {
	StructStats *StructStatistics `protobuf:"bytes,7,opt,name=struct_stats,json=structStats,oneof"`
}

func (*FeatureNameStatistics_NumStats) isFeatureNameStatistics_Stats() {}

func (*FeatureNameStatistics_StringStats) isFeatureNameStatistics_Stats() {}

func (*FeatureNameStatistics_BytesStats) isFeatureNameStatistics_Stats() {}

func (*FeatureNameStatistics_StructStats) isFeatureNameStatistics_Stats() {}

type WeightedCommonStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumNonMissing *float64 `protobuf:"fixed64,1,opt,name=num_non_missing,json=numNonMissing" json:"num_non_missing,omitempty"`
	NumMissing    *float64 `protobuf:"fixed64,2,opt,name=num_missing,json=numMissing" json:"num_missing,omitempty"`
	AvgNumValues  *float64 `protobuf:"fixed64,3,opt,name=avg_num_values,json=avgNumValues" json:"avg_num_values,omitempty"`
	TotNumValues  *float64 `protobuf:"fixed64,4,opt,name=tot_num_values,json=totNumValues" json:"tot_num_values,omitempty"`
}

func (x *WeightedCommonStatistics) Reset() {
	*x = WeightedCommonStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedCommonStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedCommonStatistics) ProtoMessage() {}

func (x *WeightedCommonStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedCommonStatistics.ProtoReflect.Descriptor instead.
func (*WeightedCommonStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{4}
}

func (x *WeightedCommonStatistics) GetNumNonMissing() float64 {
	if x != nil && x.NumNonMissing != nil {
		return *x.NumNonMissing
	}
	return 0
}

func (x *WeightedCommonStatistics) GetNumMissing() float64 {
	if x != nil && x.NumMissing != nil {
		return *x.NumMissing
	}
	return 0
}

func (x *WeightedCommonStatistics) GetAvgNumValues() float64 {
	if x != nil && x.AvgNumValues != nil {
		return *x.AvgNumValues
	}
	return 0
}

func (x *WeightedCommonStatistics) GetTotNumValues() float64 {
	if x != nil && x.TotNumValues != nil {
		return *x.TotNumValues
	}
	return 0
}

type CustomStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Val:
	//
	//	*CustomStatistic_Num
	//	*CustomStatistic_Str
	//	*CustomStatistic_Histogram
	//	*CustomStatistic_RankHistogram
	Val isCustomStatistic_Val `protobuf_oneof:"val"`
}

func (x *CustomStatistic) Reset() {
	*x = CustomStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomStatistic) ProtoMessage() {}

func (x *CustomStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomStatistic.ProtoReflect.Descriptor instead.
func (*CustomStatistic) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{5}
}

func (x *CustomStatistic) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *CustomStatistic) GetVal() isCustomStatistic_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *CustomStatistic) GetNum() float64 {
	if x, ok := x.GetVal().(*CustomStatistic_Num); ok {
		return x.Num
	}
	return 0
}

func (x *CustomStatistic) GetStr() string {
	if x, ok := x.GetVal().(*CustomStatistic_Str); ok {
		return x.Str
	}
	return ""
}

func (x *CustomStatistic) GetHistogram() *Histogram {
	if x, ok := x.GetVal().(*CustomStatistic_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *CustomStatistic) GetRankHistogram() *RankHistogram {
	if x, ok := x.GetVal().(*CustomStatistic_RankHistogram); ok {
		return x.RankHistogram
	}
	return nil
}

type isCustomStatistic_Val interface {
	isCustomStatistic_Val()
}

type CustomStatistic_Num struct {
	Num float64 `protobuf:"fixed64,2,opt,name=num,oneof"`
}

type CustomStatistic_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,oneof"`
}

type CustomStatistic_Histogram struct {
	Histogram *Histogram `protobuf:"bytes,4,opt,name=histogram,oneof"`
}

type CustomStatistic_RankHistogram struct {
	RankHistogram *RankHistogram `protobuf:"bytes,5,opt,name=rank_histogram,json=rankHistogram,oneof"`
}

func (*CustomStatistic_Num) isCustomStatistic_Val() {}

func (*CustomStatistic_Str) isCustomStatistic_Val() {}

func (*CustomStatistic_Histogram) isCustomStatistic_Val() {}

func (*CustomStatistic_RankHistogram) isCustomStatistic_Val() {}

type NumericStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonStats          *CommonStatistics          `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	Mean                 *float64                   `protobuf:"fixed64,2,opt,name=mean" json:"mean,omitempty"`
	StdDev               *float64                   `protobuf:"fixed64,3,opt,name=std_dev,json=stdDev" json:"std_dev,omitempty"`
	NumZeros             *int64                     `protobuf:"varint,4,opt,name=num_zeros,json=numZeros" json:"num_zeros,omitempty"`
	Min                  *float64                   `protobuf:"fixed64,5,opt,name=min" json:"min,omitempty"`
	Median               *float64                   `protobuf:"fixed64,6,opt,name=median" json:"median,omitempty"`
	Max                  *float64                   `protobuf:"fixed64,7,opt,name=max" json:"max,omitempty"`
	Histograms           []*Histogram               `protobuf:"bytes,8,rep,name=histograms" json:"histograms,omitempty"`
	WeightedNumericStats *WeightedNumericStatistics `protobuf:"bytes,9,opt,name=weighted_numeric_stats,json=weightedNumericStats" json:"weighted_numeric_stats,omitempty"`
}

func (x *NumericStatistics) Reset() {
	*x = NumericStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericStatistics) ProtoMessage() {}

func (x *NumericStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericStatistics.ProtoReflect.Descriptor instead.
func (*NumericStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{6}
}

func (x *NumericStatistics) GetCommonStats() *CommonStatistics {
	if x != nil {
		return x.CommonStats
	}
	return nil
}

func (x *NumericStatistics) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *NumericStatistics) GetStdDev() float64 {
	if x != nil && x.StdDev != nil {
		return *x.StdDev
	}
	return 0
}

func (x *NumericStatistics) GetNumZeros() int64 {
	if x != nil && x.NumZeros != nil {
		return *x.NumZeros
	}
	return 0
}

func (x *NumericStatistics) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *NumericStatistics) GetMedian() float64 {
	if x != nil && x.Median != nil {
		return *x.Median
	}
	return 0
}

func (x *NumericStatistics) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *NumericStatistics) GetHistograms() []*Histogram {
	if x != nil {
		return x.Histograms
	}
	return nil
}

func (x *NumericStatistics) GetWeightedNumericStats() *WeightedNumericStatistics {
	if x != nil {
		return x.WeightedNumericStats
	}
	return nil
}

type StringStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonStats         *CommonStatistics                `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	Unique              *int64                           `protobuf:"varint,2,opt,name=unique" json:"unique,omitempty"`
	TopValues           []*StringStatistics_FreqAndValue `protobuf:"bytes,3,rep,name=top_values,json=topValues" json:"top_values,omitempty"`
	AvgLength           *float32                         `protobuf:"fixed32,4,opt,name=avg_length,json=avgLength" json:"avg_length,omitempty"`
	RankHistogram       *RankHistogram                   `protobuf:"bytes,5,opt,name=rank_histogram,json=rankHistogram" json:"rank_histogram,omitempty"`
	WeightedStringStats *WeightedStringStatistics        `protobuf:"bytes,6,opt,name=weighted_string_stats,json=weightedStringStats" json:"weighted_string_stats,omitempty"`
}

func (x *StringStatistics) Reset() {
	*x = StringStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringStatistics) ProtoMessage() {}

func (x *StringStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringStatistics.ProtoReflect.Descriptor instead.
func (*StringStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{7}
}

func (x *StringStatistics) GetCommonStats() *CommonStatistics {
	if x != nil {
		return x.CommonStats
	}
	return nil
}

func (x *StringStatistics) GetUnique() int64 {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return 0
}

func (x *StringStatistics) GetTopValues() []*StringStatistics_FreqAndValue {
	if x != nil {
		return x.TopValues
	}
	return nil
}

func (x *StringStatistics) GetAvgLength() float32 {
	if x != nil && x.AvgLength != nil {
		return *x.AvgLength
	}
	return 0
}

func (x *StringStatistics) GetRankHistogram() *RankHistogram {
	if x != nil {
		return x.RankHistogram
	}
	return nil
}

func (x *StringStatistics) GetWeightedStringStats() *WeightedStringStatistics {
	if x != nil {
		return x.WeightedStringStats
	}
	return nil
}

type WeightedNumericStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean       *float64     `protobuf:"fixed64,1,opt,name=mean" json:"mean,omitempty"`
	StdDev     *float64     `protobuf:"fixed64,2,opt,name=std_dev,json=stdDev" json:"std_dev,omitempty"`
	Median     *float64     `protobuf:"fixed64,3,opt,name=median" json:"median,omitempty"`
	Histograms []*Histogram `protobuf:"bytes,4,rep,name=histograms" json:"histograms,omitempty"`
}

func (x *WeightedNumericStatistics) Reset() {
	*x = WeightedNumericStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedNumericStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedNumericStatistics) ProtoMessage() {}

func (x *WeightedNumericStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedNumericStatistics.ProtoReflect.Descriptor instead.
func (*WeightedNumericStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{8}
}

func (x *WeightedNumericStatistics) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *WeightedNumericStatistics) GetStdDev() float64 {
	if x != nil && x.StdDev != nil {
		return *x.StdDev
	}
	return 0
}

func (x *WeightedNumericStatistics) GetMedian() float64 {
	if x != nil && x.Median != nil {
		return *x.Median
	}
	return 0
}

func (x *WeightedNumericStatistics) GetHistograms() []*Histogram {
	if x != nil {
		return x.Histograms
	}
	return nil
}

type WeightedStringStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopValues     []*StringStatistics_FreqAndValue `protobuf:"bytes,1,rep,name=top_values,json=topValues" json:"top_values,omitempty"`
	RankHistogram *RankHistogram                   `protobuf:"bytes,2,opt,name=rank_histogram,json=rankHistogram" json:"rank_histogram,omitempty"`
}

func (x *WeightedStringStatistics) Reset() {
	*x = WeightedStringStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedStringStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedStringStatistics) ProtoMessage() {}

func (x *WeightedStringStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedStringStatistics.ProtoReflect.Descriptor instead.
func (*WeightedStringStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{9}
}

func (x *WeightedStringStatistics) GetTopValues() []*StringStatistics_FreqAndValue {
	if x != nil {
		return x.TopValues
	}
	return nil
}

func (x *WeightedStringStatistics) GetRankHistogram() *RankHistogram {
	if x != nil {
		return x.RankHistogram
	}
	return nil
}

type BytesStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonStats *CommonStatistics `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
	Unique      *int64            `protobuf:"varint,2,opt,name=unique" json:"unique,omitempty"`
	AvgNumBytes *float32          `protobuf:"fixed32,3,opt,name=avg_num_bytes,json=avgNumBytes" json:"avg_num_bytes,omitempty"`
	MinNumBytes *float32          `protobuf:"fixed32,4,opt,name=min_num_bytes,json=minNumBytes" json:"min_num_bytes,omitempty"`
	MaxNumBytes *float32          `protobuf:"fixed32,5,opt,name=max_num_bytes,json=maxNumBytes" json:"max_num_bytes,omitempty"`
}

func (x *BytesStatistics) Reset() {
	*x = BytesStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesStatistics) ProtoMessage() {}

func (x *BytesStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesStatistics.ProtoReflect.Descriptor instead.
func (*BytesStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{10}
}

func (x *BytesStatistics) GetCommonStats() *CommonStatistics {
	if x != nil {
		return x.CommonStats
	}
	return nil
}

func (x *BytesStatistics) GetUnique() int64 {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return 0
}

func (x *BytesStatistics) GetAvgNumBytes() float32 {
	if x != nil && x.AvgNumBytes != nil {
		return *x.AvgNumBytes
	}
	return 0
}

func (x *BytesStatistics) GetMinNumBytes() float32 {
	if x != nil && x.MinNumBytes != nil {
		return *x.MinNumBytes
	}
	return 0
}

func (x *BytesStatistics) GetMaxNumBytes() float32 {
	if x != nil && x.MaxNumBytes != nil {
		return *x.MaxNumBytes
	}
	return 0
}

type StructStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonStats *CommonStatistics `protobuf:"bytes,1,opt,name=common_stats,json=commonStats" json:"common_stats,omitempty"`
}

func (x *StructStatistics) Reset() {
	*x = StructStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructStatistics) ProtoMessage() {}

func (x *StructStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructStatistics.ProtoReflect.Descriptor instead.
func (*StructStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{11}
}

func (x *StructStatistics) GetCommonStats() *CommonStatistics {
	if x != nil {
		return x.CommonStats
	}
	return nil
}

type CommonStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumNonMissing              *int64                    `protobuf:"varint,1,opt,name=num_non_missing,json=numNonMissing" json:"num_non_missing,omitempty"`
	NumMissing                 *int64                    `protobuf:"varint,2,opt,name=num_missing,json=numMissing" json:"num_missing,omitempty"`
	MinNumValues               *int64                    `protobuf:"varint,3,opt,name=min_num_values,json=minNumValues" json:"min_num_values,omitempty"`
	MaxNumValues               *int64                    `protobuf:"varint,4,opt,name=max_num_values,json=maxNumValues" json:"max_num_values,omitempty"`
	AvgNumValues               *float32                  `protobuf:"fixed32,5,opt,name=avg_num_values,json=avgNumValues" json:"avg_num_values,omitempty"`
	TotNumValues               *int64                    `protobuf:"varint,8,opt,name=tot_num_values,json=totNumValues" json:"tot_num_values,omitempty"`
	NumValuesHistogram         *Histogram                `protobuf:"bytes,6,opt,name=num_values_histogram,json=numValuesHistogram" json:"num_values_histogram,omitempty"`
	WeightedCommonStats        *WeightedCommonStatistics `protobuf:"bytes,7,opt,name=weighted_common_stats,json=weightedCommonStats" json:"weighted_common_stats,omitempty"`
	FeatureListLengthHistogram *Histogram                `protobuf:"bytes,9,opt,name=feature_list_length_histogram,json=featureListLengthHistogram" json:"feature_list_length_histogram,omitempty"`
}

func (x *CommonStatistics) Reset() {
	*x = CommonStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonStatistics) ProtoMessage() {}

func (x *CommonStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonStatistics.ProtoReflect.Descriptor instead.
func (*CommonStatistics) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{12}
}

func (x *CommonStatistics) GetNumNonMissing() int64 {
	if x != nil && x.NumNonMissing != nil {
		return *x.NumNonMissing
	}
	return 0
}

func (x *CommonStatistics) GetNumMissing() int64 {
	if x != nil && x.NumMissing != nil {
		return *x.NumMissing
	}
	return 0
}

func (x *CommonStatistics) GetMinNumValues() int64 {
	if x != nil && x.MinNumValues != nil {
		return *x.MinNumValues
	}
	return 0
}

func (x *CommonStatistics) GetMaxNumValues() int64 {
	if x != nil && x.MaxNumValues != nil {
		return *x.MaxNumValues
	}
	return 0
}

func (x *CommonStatistics) GetAvgNumValues() float32 {
	if x != nil && x.AvgNumValues != nil {
		return *x.AvgNumValues
	}
	return 0
}

func (x *CommonStatistics) GetTotNumValues() int64 {
	if x != nil && x.TotNumValues != nil {
		return *x.TotNumValues
	}
	return 0
}

func (x *CommonStatistics) GetNumValuesHistogram() *Histogram {
	if x != nil {
		return x.NumValuesHistogram
	}
	return nil
}

func (x *CommonStatistics) GetWeightedCommonStats() *WeightedCommonStatistics {
	if x != nil {
		return x.WeightedCommonStats
	}
	return nil
}

func (x *CommonStatistics) GetFeatureListLengthHistogram() *Histogram {
	if x != nil {
		return x.FeatureListLengthHistogram
	}
	return nil
}

type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumNan       *int64                   `protobuf:"varint,1,opt,name=num_nan,json=numNan" json:"num_nan,omitempty"`
	NumUndefined *int64                   `protobuf:"varint,2,opt,name=num_undefined,json=numUndefined" json:"num_undefined,omitempty"`
	Buckets      []*Histogram_Bucket      `protobuf:"bytes,3,rep,name=buckets" json:"buckets,omitempty"`
	Type         *Histogram_HistogramType `protobuf:"varint,4,opt,name=type,enum=facetFeatureStatistics.Histogram_HistogramType" json:"type,omitempty"`
	Name         *string                  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{13}
}

func (x *Histogram) GetNumNan() int64 {
	if x != nil && x.NumNan != nil {
		return *x.NumNan
	}
	return 0
}

func (x *Histogram) GetNumUndefined() int64 {
	if x != nil && x.NumUndefined != nil {
		return *x.NumUndefined
	}
	return 0
}

func (x *Histogram) GetBuckets() []*Histogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Histogram) GetType() Histogram_HistogramType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Histogram_STANDARD
}

func (x *Histogram) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RankHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*RankHistogram_Bucket `protobuf:"bytes,1,rep,name=buckets" json:"buckets,omitempty"`
	Name    *string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *RankHistogram) Reset() {
	*x = RankHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankHistogram) ProtoMessage() {}

func (x *RankHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankHistogram.ProtoReflect.Descriptor instead.
func (*RankHistogram) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{14}
}

func (x *RankHistogram) GetBuckets() []*RankHistogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *RankHistogram) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type StringStatistics_FreqAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
	DeprecatedFreq *int64   `protobuf:"varint,1,opt,name=deprecated_freq,json=deprecatedFreq" json:"deprecated_freq,omitempty"`
	Value          *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Frequency      *float64 `protobuf:"fixed64,3,opt,name=frequency" json:"frequency,omitempty"`
}

func (x *StringStatistics_FreqAndValue) Reset() {
	*x = StringStatistics_FreqAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringStatistics_FreqAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringStatistics_FreqAndValue) ProtoMessage() {}

func (x *StringStatistics_FreqAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringStatistics_FreqAndValue.ProtoReflect.Descriptor instead.
func (*StringStatistics_FreqAndValue) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{7, 0}
}

// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
func (x *StringStatistics_FreqAndValue) GetDeprecatedFreq() int64 {
	if x != nil && x.DeprecatedFreq != nil {
		return *x.DeprecatedFreq
	}
	return 0
}

func (x *StringStatistics_FreqAndValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *StringStatistics_FreqAndValue) GetFrequency() float64 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

type Histogram_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowValue  *float64 `protobuf:"fixed64,1,opt,name=low_value,json=lowValue" json:"low_value,omitempty"`
	HighValue *float64 `protobuf:"fixed64,2,opt,name=high_value,json=highValue" json:"high_value,omitempty"`
	// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
	DeprecatedCount *int64   `protobuf:"varint,3,opt,name=deprecated_count,json=deprecatedCount" json:"deprecated_count,omitempty"`
	SampleCount     *float64 `protobuf:"fixed64,4,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
}

func (x *Histogram_Bucket) Reset() {
	*x = Histogram_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram_Bucket) ProtoMessage() {}

func (x *Histogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram_Bucket.ProtoReflect.Descriptor instead.
func (*Histogram_Bucket) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Histogram_Bucket) GetLowValue() float64 {
	if x != nil && x.LowValue != nil {
		return *x.LowValue
	}
	return 0
}

func (x *Histogram_Bucket) GetHighValue() float64 {
	if x != nil && x.HighValue != nil {
		return *x.HighValue
	}
	return 0
}

// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
func (x *Histogram_Bucket) GetDeprecatedCount() int64 {
	if x != nil && x.DeprecatedCount != nil {
		return *x.DeprecatedCount
	}
	return 0
}

func (x *Histogram_Bucket) GetSampleCount() float64 {
	if x != nil && x.SampleCount != nil {
		return *x.SampleCount
	}
	return 0
}

type RankHistogram_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowRank  *int64 `protobuf:"varint,1,opt,name=low_rank,json=lowRank" json:"low_rank,omitempty"`
	HighRank *int64 `protobuf:"varint,2,opt,name=high_rank,json=highRank" json:"high_rank,omitempty"`
	// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
	DeprecatedCount *int64   `protobuf:"varint,3,opt,name=deprecated_count,json=deprecatedCount" json:"deprecated_count,omitempty"`
	Label           *string  `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	SampleCount     *float64 `protobuf:"fixed64,5,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
}

func (x *RankHistogram_Bucket) Reset() {
	*x = RankHistogram_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facet_feature_statistics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankHistogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankHistogram_Bucket) ProtoMessage() {}

func (x *RankHistogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_facet_feature_statistics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankHistogram_Bucket.ProtoReflect.Descriptor instead.
func (*RankHistogram_Bucket) Descriptor() ([]byte, []int) {
	return file_facet_feature_statistics_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RankHistogram_Bucket) GetLowRank() int64 {
	if x != nil && x.LowRank != nil {
		return *x.LowRank
	}
	return 0
}

func (x *RankHistogram_Bucket) GetHighRank() int64 {
	if x != nil && x.HighRank != nil {
		return *x.HighRank
	}
	return 0
}

// Deprecated: Marked as deprecated in facet_feature_statistics.proto.
func (x *RankHistogram_Bucket) GetDeprecatedCount() int64 {
	if x != nil && x.DeprecatedCount != nil {
		return *x.DeprecatedCount
	}
	return 0
}

func (x *RankHistogram_Bucket) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *RankHistogram_Bucket) GetSampleCount() float64 {
	if x != nil && x.SampleCount != nil {
		return *x.SampleCount
	}
	return 0
}

var File_facet_feature_statistics_proto protoreflect.FileDescriptor

var file_facet_feature_statistics_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x6c, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfd, 0x04, 0x0a, 0x15, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x01, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x04,
	0x42, 0x0a, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x76, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52,
	0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x61, 0x6e,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x92, 0x03, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x5a,
	0x65, 0x72, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x41, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x67, 0x0a, 0x16, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x91, 0x04, 0x0a,
	0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0e, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x15, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x6f, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xa3, 0x01, 0x0a, 0x19, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x18, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x4e, 0x75, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x22, 0x5f, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xa0, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x76, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x64,
	0x0a, 0x15, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x13, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x1d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x1a,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xad, 0x03, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x4e, 0x61, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x96, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x4c, 0x45, 0x53, 0x10, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x63, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68,
	0x69, 0x67, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
}

var (
	file_facet_feature_statistics_proto_rawDescOnce sync.Once
	file_facet_feature_statistics_proto_rawDescData = file_facet_feature_statistics_proto_rawDesc
)

func file_facet_feature_statistics_proto_rawDescGZIP() []byte {
	file_facet_feature_statistics_proto_rawDescOnce.Do(func() {
		file_facet_feature_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_facet_feature_statistics_proto_rawDescData)
	})
	return file_facet_feature_statistics_proto_rawDescData
}

var file_facet_feature_statistics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_facet_feature_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_facet_feature_statistics_proto_goTypes = []interface{}{
	(FeatureNameStatistics_Type)(0),       // 0: facetFeatureStatistics.FeatureNameStatistics.Type
	(Histogram_HistogramType)(0),          // 1: facetFeatureStatistics.Histogram.HistogramType
	(*DatasetFeatureStatisticsList)(nil),  // 2: facetFeatureStatistics.DatasetFeatureStatisticsList
	(*Path)(nil),                          // 3: facetFeatureStatistics.Path
	(*DatasetFeatureStatistics)(nil),      // 4: facetFeatureStatistics.DatasetFeatureStatistics
	(*FeatureNameStatistics)(nil),         // 5: facetFeatureStatistics.FeatureNameStatistics
	(*WeightedCommonStatistics)(nil),      // 6: facetFeatureStatistics.WeightedCommonStatistics
	(*CustomStatistic)(nil),               // 7: facetFeatureStatistics.CustomStatistic
	(*NumericStatistics)(nil),             // 8: facetFeatureStatistics.NumericStatistics
	(*StringStatistics)(nil),              // 9: facetFeatureStatistics.StringStatistics
	(*WeightedNumericStatistics)(nil),     // 10: facetFeatureStatistics.WeightedNumericStatistics
	(*WeightedStringStatistics)(nil),      // 11: facetFeatureStatistics.WeightedStringStatistics
	(*BytesStatistics)(nil),               // 12: facetFeatureStatistics.BytesStatistics
	(*StructStatistics)(nil),              // 13: facetFeatureStatistics.StructStatistics
	(*CommonStatistics)(nil),              // 14: facetFeatureStatistics.CommonStatistics
	(*Histogram)(nil),                     // 15: facetFeatureStatistics.Histogram
	(*RankHistogram)(nil),                 // 16: facetFeatureStatistics.RankHistogram
	(*StringStatistics_FreqAndValue)(nil), // 17: facetFeatureStatistics.StringStatistics.FreqAndValue
	(*Histogram_Bucket)(nil),              // 18: facetFeatureStatistics.Histogram.Bucket
	(*RankHistogram_Bucket)(nil),          // 19: facetFeatureStatistics.RankHistogram.Bucket
}
var file_facet_feature_statistics_proto_depIdxs = []int32{
	4,  // 0: facetFeatureStatistics.DatasetFeatureStatisticsList.datasets:type_name -> facetFeatureStatistics.DatasetFeatureStatistics
	5,  // 1: facetFeatureStatistics.DatasetFeatureStatistics.features:type_name -> facetFeatureStatistics.FeatureNameStatistics
	3,  // 2: facetFeatureStatistics.FeatureNameStatistics.path:type_name -> facetFeatureStatistics.Path
	0,  // 3: facetFeatureStatistics.FeatureNameStatistics.type:type_name -> facetFeatureStatistics.FeatureNameStatistics.Type
	8,  // 4: facetFeatureStatistics.FeatureNameStatistics.num_stats:type_name -> facetFeatureStatistics.NumericStatistics
	9,  // 5: facetFeatureStatistics.FeatureNameStatistics.string_stats:type_name -> facetFeatureStatistics.StringStatistics
	12, // 6: facetFeatureStatistics.FeatureNameStatistics.bytes_stats:type_name -> facetFeatureStatistics.BytesStatistics
	13, // 7: facetFeatureStatistics.FeatureNameStatistics.struct_stats:type_name -> facetFeatureStatistics.StructStatistics
	7,  // 8: facetFeatureStatistics.FeatureNameStatistics.custom_stats:type_name -> facetFeatureStatistics.CustomStatistic
	15, // 9: facetFeatureStatistics.CustomStatistic.histogram:type_name -> facetFeatureStatistics.Histogram
	16, // 10: facetFeatureStatistics.CustomStatistic.rank_histogram:type_name -> facetFeatureStatistics.RankHistogram
	14, // 11: facetFeatureStatistics.NumericStatistics.common_stats:type_name -> facetFeatureStatistics.CommonStatistics
	15, // 12: facetFeatureStatistics.NumericStatistics.histograms:type_name -> facetFeatureStatistics.Histogram
	10, // 13: facetFeatureStatistics.NumericStatistics.weighted_numeric_stats:type_name -> facetFeatureStatistics.WeightedNumericStatistics
	14, // 14: facetFeatureStatistics.StringStatistics.common_stats:type_name -> facetFeatureStatistics.CommonStatistics
	17, // 15: facetFeatureStatistics.StringStatistics.top_values:type_name -> facetFeatureStatistics.StringStatistics.FreqAndValue
	16, // 16: facetFeatureStatistics.StringStatistics.rank_histogram:type_name -> facetFeatureStatistics.RankHistogram
	11, // 17: facetFeatureStatistics.StringStatistics.weighted_string_stats:type_name -> facetFeatureStatistics.WeightedStringStatistics
	15, // 18: facetFeatureStatistics.WeightedNumericStatistics.histograms:type_name -> facetFeatureStatistics.Histogram
	17, // 19: facetFeatureStatistics.WeightedStringStatistics.top_values:type_name -> facetFeatureStatistics.StringStatistics.FreqAndValue
	16, // 20: facetFeatureStatistics.WeightedStringStatistics.rank_histogram:type_name -> facetFeatureStatistics.RankHistogram
	14, // 21: facetFeatureStatistics.BytesStatistics.common_stats:type_name -> facetFeatureStatistics.CommonStatistics
	14, // 22: facetFeatureStatistics.StructStatistics.common_stats:type_name -> facetFeatureStatistics.CommonStatistics
	15, // 23: facetFeatureStatistics.CommonStatistics.num_values_histogram:type_name -> facetFeatureStatistics.Histogram
	6,  // 24: facetFeatureStatistics.CommonStatistics.weighted_common_stats:type_name -> facetFeatureStatistics.WeightedCommonStatistics
	15, // 25: facetFeatureStatistics.CommonStatistics.feature_list_length_histogram:type_name -> facetFeatureStatistics.Histogram
	18, // 26: facetFeatureStatistics.Histogram.buckets:type_name -> facetFeatureStatistics.Histogram.Bucket
	1,  // 27: facetFeatureStatistics.Histogram.type:type_name -> facetFeatureStatistics.Histogram.HistogramType
	19, // 28: facetFeatureStatistics.RankHistogram.buckets:type_name -> facetFeatureStatistics.RankHistogram.Bucket
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_facet_feature_statistics_proto_init() }
func file_facet_feature_statistics_proto_init() {
	if File_facet_feature_statistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_facet_feature_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetFeatureStatisticsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetFeatureStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureNameStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedCommonStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedNumericStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedStringStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringStatistics_FreqAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facet_feature_statistics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankHistogram_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_facet_feature_statistics_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FeatureNameStatistics_Name)(nil),
		(*FeatureNameStatistics_Path)(nil),
		(*FeatureNameStatistics_NumStats)(nil),
		(*FeatureNameStatistics_StringStats)(nil),
		(*FeatureNameStatistics_BytesStats)(nil),
		(*FeatureNameStatistics_StructStats)(nil),
	}
	file_facet_feature_statistics_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CustomStatistic_Num)(nil),
		(*CustomStatistic_Str)(nil),
		(*CustomStatistic_Histogram)(nil),
		(*CustomStatistic_RankHistogram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_facet_feature_statistics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_facet_feature_statistics_proto_goTypes,
		DependencyIndexes: file_facet_feature_statistics_proto_depIdxs,
		EnumInfos:         file_facet_feature_statistics_proto_enumTypes,
		MessageInfos:      file_facet_feature_statistics_proto_msgTypes,
	}.Build()
	File_facet_feature_statistics_proto = out.File
	file_facet_feature_statistics_proto_rawDesc = nil
	file_facet_feature_statistics_proto_goTypes = nil
	file_facet_feature_statistics_proto_depIdxs = nil
}
